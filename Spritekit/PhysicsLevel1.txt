Level 1
=======

Helpers
-------

        import Foundation
        import UIKit

        public func delay(_ delay: Double, closure: @escaping () -> ()) {
            DispatchQueue.main.asyncAfter(deadline: .now() + delay) {
                closure()
            }
        }


        public func random(min : CGFloat , max : CGFloat) -> CGFloat {
            return CGFloat(Float(arc4random()) / Float(0xFFFFFFFF)) * (max - min) + min
        }
        
Physics
-------

        //: Playground - noun: a place where people can play

        import UIKit
        import SpriteKit
        //import XCPlayground
        import PlaygroundSupport

        let sceneView = SKView(frame: CGRect(x: 0, y: 0, width: 480, height: 320))
        let scene  = SKScene(size: CGSize(width: 480, height: 320))
        sceneView.showsFPS = true
        //sceneView.showsPhysics = true
        scene.physicsWorld.gravity = CGVector(dx: 0, dy: 0)
        scene.physicsBody = SKPhysicsBody(edgeLoopFrom: scene.frame)
        sceneView.presentScene(scene)

        //XCPShowView(identifier: "My Scene", view: sceneView)
        PlaygroundPage.current.liveView = sceneView

        let square = SKSpriteNode(imageNamed: "square")
        square.name = "shape"
        square.position = CGPoint(x: scene.size.width*0.25, y: scene.size.height*0.5)
        square.physicsBody = SKPhysicsBody(rectangleOf: square.frame.size)
        scene.addChild(square)

        let circle = SKSpriteNode(imageNamed: "circle")
        circle.name = "shape"
        circle.position = CGPoint(x: scene.size.width*0.5, y: scene.size.height*0.5)
        circle.physicsBody = SKPhysicsBody(circleOfRadius: circle.size.width/2)
        scene.addChild(circle)

        let triangle = SKSpriteNode(imageNamed: "triangle")
        triangle.name = "shape"
        triangle.position = CGPoint(x: scene.size.width*0.75, y: scene.size.height*0.5)

        //create the recangle path
        var trianglePath = CGMutablePath()
        trianglePath.move(to: CGPoint(x: -triangle.size.width/2, y: -triangle.size.height/2))
        trianglePath.addLine(to: CGPoint(x: triangle.size.width/2, y: -triangle.size.height/2))
        trianglePath.addLine(to: CGPoint(x: 0, y: triangle.size.height/2))
        trianglePath.addLine(to: CGPoint(x: -triangle.size.width/2, y: -triangle.size.height/2))


        triangle.physicsBody = SKPhysicsBody(polygonFrom: trianglePath)
        scene.addChild(triangle)


        let l = SKSpriteNode(imageNamed: "L")
        l.name = "shape"
        l.position = CGPoint(x: scene.size.width*0.5, y: scene.size.height*0.75)
        l.physicsBody = SKPhysicsBody(texture: l.texture!, size: l.size)
        scene.addChild(l)



        func spawnSand () {
            let sand = SKSpriteNode(imageNamed: "sand")

            sand.position = CGPoint(x: random(min: 0.0, max: scene.size.width), y: scene.size.height - sand.size.height)

            sand.physicsBody = SKPhysicsBody(circleOfRadius: sand.size.width/2)
            sand.physicsBody?.restitution = 1.0
            sand.physicsBody?.density = 10.0
            sand.name = "sand"
            scene.addChild(sand)
        }

        func shake() {
            scene.enumerateChildNodes(withName: "sand", using: {node , _ in
                node.physicsBody?.applyImpulse(CGVector(dx: random(min: 20, max: 60), dy: random(min: 20, max: 60)))
            })
        }

        var blowingRight = true
        var windForce = CGVector(dx: 500, dy: 0)

        func windWithTimer()  {
            scene.enumerateChildNodes(withName: "shape", using: {node, _ in
                node.physicsBody?.applyForce(windForce)
            })

            scene.enumerateChildNodes(withName: "sand", using: {node, _ in
                node.physicsBody?.applyForce(windForce)
            })
        }

        func switchWindDirection() {
            blowingRight = !blowingRight
            windForce = CGVector(dx: blowingRight ? 500 : -500 , dy: 0)
        }


        delay(3.0, closure: {
            scene.physicsWorld.gravity = CGVector(dx: 0, dy: -9.8)

            scene.run(SKAction.repeat(SKAction.sequence([SKAction.run(spawnSand), SKAction.wait(forDuration: 0.1)]), count: 100))

            //scene.run(SKAction.repeat(SKAction.sequence([SKAction.wait(forDuration: 12),SKAction.run(shake)]), count: 30))

            let applyForceAction =  SKAction.sequence([SKAction.wait(forDuration: 0.05), SKAction.repeat(SKAction.run(windWithTimer), count: 4) ])

            let changeDirectionAction = SKAction.sequence([SKAction.wait(forDuration: 9.0), SKAction.run(switchWindDirection)])

            scene.run(SKAction.repeatForever(SKAction.group([applyForceAction , changeDirectionAction])))

        })








        /*:
         Physics Body Properties

         * restitution
         * density
         * friction
         * dynamic
         * usesPreciseCollisionDetection
         * allowRotation
         * linearDamping and angularDamping
         * affectedByGravity
         * resting
         * mass and area
         * node
         * categoryBitMask, collisionBitMask, contactBitMask, joints

         */


        //: [Next Topic] (@next)
