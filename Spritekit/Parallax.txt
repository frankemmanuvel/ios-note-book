//
//  TaleneParallax.swift
//  TestParallax
//
//  Created by frank thamel on 1/19/17.
//  Copyright Â© 2017 Talene. All rights reserved.
//

import Foundation
import SpriteKit

class TaleneParallax : SKScene{
    
    /*
     * These methods should be override in order to add parallax effect to the game scene.
     *
     override func didMove(to view: SKView) {
     super.didMove(to: view)
     }
     
     override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
     super.touchesBegan(touches, with: event)
     
     }
     
     override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {
     super.touchesMoved(touches, with: event)
     }
     
     override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
     super.touchesEnded(touches, with: event)
     }
     
     override func update(_ currentTime: TimeInterval) {
     super.update(currentTime)
     }
     
     * Layer 1 is must
     * Layer 1 should contains the icons
     * Should set icon layer count
     * numberOfActiveFrames = 3
     */
    
    // Talene Parallax layers
    var layer1 : SKNode?
    var layer2 : SKNode?
    var layer3 : SKNode?
    var layer4 : SKNode?
    var layer5 : SKNode?
    var layer6 : SKNode?
    var layer7 : SKNode?
    
    //touch begin point
    var startPoint = CGPoint.zero
    
    //touch end point
    var lastPoint  = CGPoint.zero
    
    //touch start time
    var startTime: TimeInterval = 0
    
    //touch end time
    var endTime: TimeInterval = 0
    
    //update time interval
    var dt : TimeInterval = 0
    
    //point before touch end
    var beforeLastPoint = CGPoint.zero
    
    //set number of active frames
    var numberOfActiveFrames : CGFloat = 0 {
        didSet {
            n = numberOfActiveFrames
        }
    }
    
    //icon layer frame count
    var n : CGFloat = 0 {
        didSet {
            layer1Min = 0.5 * ( n * x * -1 ) / 0.8
            layer1Max = 0.5 *  x  / 0.8
            
            layer2Min = 0.6 * ( n * x * -1 ) / 0.8
            layer2Max = 0.6 *  x  / 0.8
            
            layer3Min = 0.7 * ( n * x * -1 ) / 0.8
            layer3Max = 0.7 *  x  / 0.8
            
            layer4Min = n * x * -1
            layer4Max =  x
            
            layer5Min = 0.9 * ( n * x * -1 ) / 0.8
            layer5Max = 0.9 * x  / 0.8
            
            layer6Min =  ( n * x * -1 ) / 0.8
            layer6Max =   x  / 0.8
            
            layer7Min = 1.1 * ( n * x * -1 ) / 0.8
            layer7Max = 1.1 *  x  / 0.8
            
        }
    }
    
    //frame width
    var x : CGFloat = 0
    
    //isFinger on scren
    var isFingerOnScreen = false
    
    
    // layers min and max
    var layer1Min : CGFloat = 0
    var layer1Max : CGFloat = 0
    
    var layer2Min : CGFloat = 0
    var layer2Max : CGFloat = 0
    
    var layer3Min : CGFloat = 0
    var layer3Max : CGFloat = 0
    
    var layer4Min : CGFloat = 0
    var layer4Max : CGFloat = 0
    
    var layer5Min : CGFloat = 0
    var layer5Max : CGFloat = 0
    
    var layer6Min : CGFloat = 0
    var layer6Max : CGFloat = 0
    
    var layer7Min : CGFloat = 0
    var layer7Max : CGFloat = 0
    
    
    
    override func didMove(to view: SKView) {
        layer1 = childNode(withName: "layer1")
        layer2 = childNode(withName: "layer2")
        layer3 = childNode(withName: "layer3")
        layer4 = childNode(withName: "layer4")
        layer5 = childNode(withName: "layer5")
        layer6 = childNode(withName: "layer6")
        layer7 = childNode(withName: "layer7")
        
        self.view?.isMultipleTouchEnabled = false
        
        x = frame.width
        print("Frame width : \(x)")
    }
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        isFingerOnScreen = true
        guard let touch = touches.first else {
            return
        }
        startPoint = touch.location(in: self)
        lastPoint = startPoint
        //remove move actions
        layer1?.removeAction(forKey: "move_background_layer1")
        layer2?.removeAction(forKey: "move_background_layer2")
        layer3?.removeAction(forKey: "move_background_layer3")
        layer4?.removeAction(forKey: "move_background_layer4")
        layer5?.removeAction(forKey: "move_background_layer5")
        layer6?.removeAction(forKey: "move_background_layer6")
        layer7?.removeAction(forKey: "move_background_layer7")
        
        //set start time
        startTime = dt
    }
    
    override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {
        isFingerOnScreen = true
        
        //get layer 4 x position
        let layer1X = layer1?.position.x
        
        //true = right
        let direction : Bool = (lastPoint.x - beforeLastPoint.x) > 0 ? true : false
        
        guard let touch = touches.first else {
            return
        }
        let touchPoint  = touch.location(in: self)
        
        if (layer1Min < layer1X! ) && ( layer1X! < layer1Max ) {
            moveLayersOnTouch(layers: layer1,layer2,layer3,layer4,layer5,layer6,layer7, distance: (touchPoint.x - lastPoint.x ), multiplier: 0.5)
        } else if layer1X! == layer1Min && direction {
            moveLayersOnTouch(layers: layer1,layer2,layer3,layer4,layer5,layer6,layer7, distance: (touchPoint.x - lastPoint.x ), multiplier: 0.5)
        } else if layer1X! == layer1Max && !direction{
            moveLayersOnTouch(layers: layer1,layer2,layer3,layer4,layer5,layer6,layer7, distance: (touchPoint.x - lastPoint.x ), multiplier: 0.5)
        }
        
        beforeLastPoint = lastPoint
        lastPoint = touchPoint
        checkBounds()
    }
    
    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
        isFingerOnScreen = false
        //set end time
        endTime = dt
        let timeDifference = abs(startTime - endTime)
        
        //true = right
        let direction : Bool = (lastPoint.x - beforeLastPoint.x) > 0 ? true : false
        
        //touch move distance
        let touchMoveDistance = abs(lastPoint.x - startPoint.x)
        
        //get layer 4 x position
        let layer1X = layer1?.position.x
        
        if touchMoveDistance > 120 && timeDifference < 0.8 && (layer1Min < layer1X!) && (layer1Max > layer1X!){
            let moveRightActionLayer1 = SKAction.moveBy(x: 2000*0.5, y: 0, duration: 2)
            let moveLeftActionLayer1 = SKAction.moveBy(x: -2000*0.5, y: 0, duration: 2)
            moveRightActionLayer1.timingMode = .easeOut
            moveLeftActionLayer1.timingMode = .easeOut
            layer1?.run(direction ? moveRightActionLayer1 : moveLeftActionLayer1 , withKey: "move_background_layer1")
            
            let moveRightActionLayer2 = SKAction.moveBy(x: 2000*0.6, y: 0, duration: 2)
            let moveLeftActionLayer2 = SKAction.moveBy(x: -2000*0.6, y: 0, duration: 2)
            moveRightActionLayer2.timingMode = .easeOut
            moveLeftActionLayer2.timingMode = .easeOut
            layer2?.run(direction ? moveRightActionLayer2 : moveLeftActionLayer2 , withKey: "move_background_layer2")
            
            let moveRightActionLayer3 = SKAction.moveBy(x: 2000*0.7, y: 0, duration: 2)
            let moveLeftActionLayer3 = SKAction.moveBy(x: -2000*0.7, y: 0, duration: 2)
            moveRightActionLayer3.timingMode = .easeOut
            moveLeftActionLayer3.timingMode = .easeOut
            layer3?.run(direction ? moveRightActionLayer3 : moveLeftActionLayer3 , withKey: "move_background_layer3")
            
            let moveRightActionLayer4 = SKAction.moveBy(x: 2000*0.8, y: 0, duration: 2)
            let moveLeftActionLayer4 = SKAction.moveBy(x: -2000*0.8, y: 0, duration: 2)
            moveRightActionLayer4.timingMode = .easeOut
            moveLeftActionLayer4.timingMode = .easeOut
            layer4?.run(direction ? moveRightActionLayer4 : moveLeftActionLayer4 , withKey: "move_background_layer4")
            
            let moveRightActionLayer5 = SKAction.moveBy(x: 2000*0.9, y: 0, duration: 2)
            let moveLeftActionLayer5 = SKAction.moveBy(x: -2000*0.9, y: 0, duration: 2)
            moveRightActionLayer5.timingMode = .easeOut
            moveLeftActionLayer5.timingMode = .easeOut
            layer5?.run(direction ? moveRightActionLayer5 : moveLeftActionLayer5 , withKey: "move_background_layer5")
            
            let moveRightActionLayer6 = SKAction.moveBy(x: 2000, y: 0, duration: 2)
            let moveLeftActionLayer6 = SKAction.moveBy(x: -2000, y: 0, duration: 2)
            moveRightActionLayer6.timingMode = .easeOut
            moveLeftActionLayer6.timingMode = .easeOut
            layer6?.run(direction ? moveRightActionLayer6 : moveLeftActionLayer6 , withKey: "move_background_layer6")
            
            let moveRightActionLayer7 = SKAction.moveBy(x: 2000*1.1, y: 0, duration: 2)
            let moveLeftActionLayer7 = SKAction.moveBy(x: -2000*1.1, y: 0, duration: 2)
            moveRightActionLayer7.timingMode = .easeOut
            moveLeftActionLayer7.timingMode = .easeOut
            layer7?.run(direction ? moveRightActionLayer7 : moveLeftActionLayer7 , withKey: "move_background_layer7")
            
            
        } else {
            layer1?.removeAction(forKey: "move_background_layer1")
            layer2?.removeAction(forKey: "move_background_layer2")
            layer3?.removeAction(forKey: "move_background_layer3")
            layer4?.removeAction(forKey: "move_background_layer4")
            layer5?.removeAction(forKey: "move_background_layer5")
            layer6?.removeAction(forKey: "move_background_layer6")
            layer7?.removeAction(forKey: "move_background_layer7")
        }
        
    }
    
    override func update(_ currentTime: TimeInterval) {
        dt = currentTime
        if !isFingerOnScreen{
            checkBoundsFreely()
        }
    }
    
    // check bounds when finger is not on screen
    func checkBoundsFreely() {
        if let l1 = layer1 {
            if l1.position.x < layer1Min {
                
                layer1?.position.x = layer1Min
                
                moveToMinInAction(layer: layer2, layerMinPoint: layer2Min , in : 0.1)
                moveToMinInAction(layer: layer3, layerMinPoint: layer3Min , in : 0.2)
                moveToMinInAction(layer: layer4, layerMinPoint: layer4Min , in : 0.3)
                moveToMinInAction(layer: layer5, layerMinPoint: layer5Min , in : 0.4)
                moveToMinInAction(layer: layer6, layerMinPoint: layer6Min , in : 0.5)
                moveToMinInAction(layer: layer7, layerMinPoint: layer7Min , in : 0.6)
                
                addMoveRight(layers: layer1,layer2,layer3,layer4,layer5,layer6,layer7)
            }
            if l1.position.x > layer1Max {
                
                layer1?.position.x = layer1Max
                
                moveToMaxInAction(layer: layer2, layerMaxPoint: layer2Max , in : 0.1)
                moveToMaxInAction(layer: layer3, layerMaxPoint: layer3Max , in : 0.2)
                moveToMaxInAction(layer: layer4, layerMaxPoint: layer4Max , in : 0.3)
                moveToMaxInAction(layer: layer5, layerMaxPoint: layer5Max , in : 0.4)
                moveToMaxInAction(layer: layer6, layerMaxPoint: layer6Max , in : 0.5)
                moveToMaxInAction(layer: layer7, layerMaxPoint: layer7Max , in : 0.6)
                
                addMoveLeft(layers: layer1,layer2,layer3,layer4,layer5,layer6,layer7)
            }
        }
        
    }
    
    // slowdown when layer1 reaches to bounds
    func moveToMinInAction(layer : SKNode? , layerMinPoint : CGFloat , in time : TimeInterval) {
        let layerMin = CGPoint(x: layerMinPoint, y: 0)
        let moveToMinAction = SKAction.move(to: layerMin, duration: time)
        layer?.run(moveToMinAction)
    }
    
    // slowdown when layer1 reaches to bounds
    func moveToMaxInAction(layer : SKNode? , layerMaxPoint : CGFloat , in time : TimeInterval) {
        let layerMax = CGPoint(x: layerMaxPoint, y: 0)
        let moveToMaxAction = SKAction.move(to: layerMax, duration: time)
        layer?.run(moveToMaxAction)
    }
    
    // check bounds when scrolling
    func checkBounds() {
        
        if let l1 = layer1 {
            if l1.position.x < layer1Min {
                layer1?.position.x = layer1Min
                layer2?.position.x = layer2Min
                layer3?.position.x = layer3Min
                layer4?.position.x = layer4Min
                layer5?.position.x = layer5Min
                layer6?.position.x = layer6Min
                layer7?.position.x = layer7Min
                
                removeMoveRight(layers: layer1,layer2,layer3,layer4,layer5,layer6,layer7)
            }
            if l1.position.x > layer1Max {
                layer1?.position.x = layer1Max
                layer2?.position.x = layer2Max
                layer3?.position.x = layer3Max
                layer4?.position.x = layer4Max
                layer5?.position.x = layer5Max
                layer6?.position.x = layer6Max
                layer7?.position.x = layer7Max
                
                removeMoveLeft(layers: layer1,layer2,layer3,layer4,layer5,layer6,layer7)
            }
        }
        
    }
    
    // check bounds and add bounce effect to right
    func addMoveRight(layers : SKNode?...) {
        var multiplier : CGFloat = 0.5
        for(index , layer) in layers.enumerated() {
            layer?.removeAction(forKey: "move_background_layer\(index+1)")
            let move = SKAction.moveBy(x: CGFloat(150) * multiplier, y: 0, duration: 2)
            move.timingMode = .easeOut
            layer?.run(move, withKey: "move_r")
            multiplier += 0.2
        }
    }
    
    // check bounds and add bounce effect to laft
    func addMoveLeft(layers : SKNode?...) {
        var multiplier : CGFloat = 0.5
        for(index , layer) in layers.enumerated() {
            layer?.removeAction(forKey: "move_background_layer\(index+1)")
            let move = SKAction.moveBy(x: CGFloat(-150) * multiplier, y: 0, duration: 2)
            move.timingMode = .easeOut
            layer?.run(move, withKey: "move_l")
            multiplier += 0.2
        }
    }
    
    // check bounds and add remove layer actions
    func removeMoveRight(layers : SKNode?...) {
        for(index , layer) in layers.enumerated() {
            layer?.removeAction(forKey: "move_background_layer\(index+1)")
            layer?.removeAction(forKey: "move_r")
        }
    }
    
    // check bounds and add remove layer actions
    func removeMoveLeft(layers : SKNode?...) {
        for(index , layer) in layers.enumerated() {
            layer?.removeAction(forKey: "move_background_layer\(index+1)")
            layer?.removeAction(forKey: "move_l")
        }
    }
    
    // move layers when scrolling
    func moveLayersOnTouch(layers : SKNode?... , distance : CGFloat , multiplier : CGFloat) {
        var minMultiplier = multiplier
        for layer in layers {
            layer?.position.x += ( distance * minMultiplier)
            minMultiplier += 0.1
        }
    }
    
}
